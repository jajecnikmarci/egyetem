<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_debugmalloc_8h_source" xml:lang="hu">
<title>debugmalloc.h</title>
Ugrás a fájl dokumentációjához.<programlisting linenumbering="unnumbered"><anchor xml:id="_debugmalloc_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#ifndef&#32;DEBUGMALLOC_H</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00002"/>00002 <emphasis role="preprocessor">#define&#32;DEBUGMALLOC_H</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00003"/>00003 
<anchor xml:id="_debugmalloc_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;stdbool.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;stddef.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&lt;ctype.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00010"/>00010 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00011"/>00011 
<anchor xml:id="_debugmalloc_8h_source_1l00012"/>00012 
<anchor xml:id="_debugmalloc_8h_source_1l00013"/>00013 <emphasis role="keyword">enum</emphasis>&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;size&#32;of&#32;canary&#32;in&#32;bytes.&#32;should&#32;be&#32;multiple&#32;of&#32;largest&#32;alignment</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00015"/>00015 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;required&#32;by&#32;any&#32;data&#32;type&#32;(usually&#32;8&#32;or&#32;16)&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00016"/><link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">00016</link> &#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>&#32;=&#32;64,
<anchor xml:id="_debugmalloc_8h_source_1l00017"/>00017 &#32;&#32;&#32;&#32;
<anchor xml:id="_debugmalloc_8h_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;canary&#32;byte&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00019"/><link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">00019</link> &#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>&#32;=&#32;<emphasis role="charliteral">&apos;K&apos;</emphasis>,
<anchor xml:id="_debugmalloc_8h_source_1l00020"/>00020 
<anchor xml:id="_debugmalloc_8h_source_1l00021"/>00021 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;hash&#32;table&#32;size&#32;for&#32;allocated&#32;entries&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00022"/><link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">00022</link> &#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">debugmalloc_tablesize</link>&#32;=&#32;256,
<anchor xml:id="_debugmalloc_8h_source_1l00023"/>00023 &#32;&#32;&#32;&#32;
<anchor xml:id="_debugmalloc_8h_source_1l00024"/>00024 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;max&#32;block&#32;size&#32;for&#32;allocation,&#32;can&#32;be&#32;modified&#32;with&#32;debugmalloc_max_block_size()&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00025"/>00025 &#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bae8726dfde3f35d4345009234ee734f6c">debugmalloc_max_block_size_default</link>&#32;=&#32;1048576
<anchor xml:id="_debugmalloc_8h_source_1l00026"/><link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bae8726dfde3f35d4345009234ee734f6c">00026</link> };
<anchor xml:id="_debugmalloc_8h_source_1l00027"/>00027 
<anchor xml:id="_debugmalloc_8h_source_1l00028"/>00028 
<anchor xml:id="_debugmalloc_8h_source_1l00029"/>00029 <emphasis role="comment">/*&#32;make&#32;getpid&#32;and&#32;putenv&#32;&quot;crossplatform&quot;.&#32;deprecated&#32;on&#32;windows&#32;but&#32;they&#32;work&#32;just&#32;fine,</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00030"/>00030 <emphasis role="comment">&#32;*&#32;however&#32;not&#32;declared.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00031"/>00031 <emphasis role="preprocessor">#ifdef&#32;_WIN32</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;windows&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00033"/>00033 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;process.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00034"/>00034 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;_MSC_VER</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;visual&#32;studio,&#32;getenv/getpid&#32;deprecated&#32;warning&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00036"/>00036 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#pragma&#32;warning(disable:&#32;4996)</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00037"/>00037 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;other&#32;windows.&#32;the&#32;declaration&#32;is&#32;unfortunately&#32;hidden</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00039"/>00039 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*&#32;in&#32;mingw&#32;header&#32;files&#32;by&#32;ifdefs.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;putenv(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*);
<anchor xml:id="_debugmalloc_8h_source_1l00041"/>00041 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00042"/>00042 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;posix&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00044"/>00044 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00045"/>00045 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00046"/>00046 
<anchor xml:id="_debugmalloc_8h_source_1l00047"/>00047 
<anchor xml:id="_debugmalloc_8h_source_1l00048"/>00048 <emphasis role="comment">/*&#32;linked&#32;list&#32;entry&#32;for&#32;allocated&#32;blocks&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00049"/><link linkend="_struct_debugmalloc_entry">00049</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00050"/><link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">00050</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;the&#32;address&#32;of&#32;the&#32;real&#32;allocation&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00051"/><link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">00051</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;address&#32;shown&#32;to&#32;the&#32;user&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00052"/><link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">00052</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;size&#32;of&#32;block&#32;requested&#32;by&#32;user&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00053"/>00053 
<anchor xml:id="_debugmalloc_8h_source_1l00054"/><link linkend="_struct_debugmalloc_entry_1aedfc2cd00d6ab713f95c6c04f5b5b872">00054</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_debugmalloc_entry_1aedfc2cd00d6ab713f95c6c04f5b5b872">file</link>[64];&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;malloc&#32;called&#32;in&#32;this&#32;file&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00055"/><link linkend="_struct_debugmalloc_entry_1ac7102a001b0ab6ba17fa678e52da3bd7">00055</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_struct_debugmalloc_entry_1ac7102a001b0ab6ba17fa678e52da3bd7">line</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;malloc&#32;called&#32;at&#32;this&#32;line&#32;in&#32;file&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00056"/><link linkend="_struct_debugmalloc_entry_1aaf9421513f3d0e67a51cda1ed2796b39">00056</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_debugmalloc_entry_1aaf9421513f3d0e67a51cda1ed2796b39">func</link>[32];&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;allocation&#32;function&#32;called&#32;(malloc,&#32;calloc,&#32;realloc)&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00057"/><link linkend="_struct_debugmalloc_entry_1a924e868d89538624ae6f33b62a8fa1e5">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_debugmalloc_entry_1a924e868d89538624ae6f33b62a8fa1e5">expr</link>[128];&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;expression&#32;calculating&#32;the&#32;size&#32;of&#32;allocation&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00058"/>00058 
<anchor xml:id="_debugmalloc_8h_source_1l00059"/><link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">00059</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>,&#32;*<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>;&#32;&#32;<emphasis role="comment">/*&#32;for&#32;doubly&#32;linked&#32;list&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00060"/><link linkend="_debugmalloc_8h_1a69e016f03a024f815bedf07ed671d4ea">00060</link> }&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00061"/>00061 
<anchor xml:id="_debugmalloc_8h_source_1l00062"/>00062 
<anchor xml:id="_debugmalloc_8h_source_1l00063"/>00063 <emphasis role="comment">/*&#32;debugmalloc&#32;singleton,&#32;storing&#32;all&#32;state&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00064"/><link linkend="_struct_debugmalloc_data">00064</link> <emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00065"/><link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">00065</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>[256];&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;log&#32;file&#32;name&#32;or&#32;empty&#32;string&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00066"/><link linkend="_struct_debugmalloc_data_1a3efccbd2d65ddc16ee04c084a6885952">00066</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_debugmalloc_data_1a3efccbd2d65ddc16ee04c084a6885952">max_block_size</link>;&#32;&#32;<emphasis role="comment">/*&#32;max&#32;size&#32;of&#32;a&#32;single&#32;block&#32;allocated&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00067"/><link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">00067</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">alloc_count</link>;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;currently&#32;allocated;&#32;decreased&#32;with&#32;free&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00068"/><link linkend="_struct_debugmalloc_data_1acdde6dca667a33cc5face7647a8bbf9f">00068</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_debugmalloc_data_1acdde6dca667a33cc5face7647a8bbf9f">alloc_bytes</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00069"/><link linkend="_struct_debugmalloc_data_1ae76cf1e973fe60e91222a1da3f17a754">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_debugmalloc_data_1ae76cf1e973fe60e91222a1da3f17a754">all_alloc_count</link>;&#32;<emphasis role="comment">/*&#32;all&#32;allocations,&#32;never&#32;decreased&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00070"/><link linkend="_struct_debugmalloc_data_1ae0268ac149302566a274deb380794455">00070</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">long</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;<link linkend="_struct_debugmalloc_data_1ae0268ac149302566a274deb380794455">all_alloc_bytes</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00071"/><link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">00071</link> &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">debugmalloc_tablesize</link>],&#32;<link linkend="_struct_debugmalloc_data_1a702f3dd81d3f44a3c65c73891ba0fddf">tail</link>[<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">debugmalloc_tablesize</link>];&#32;&#32;<emphasis role="comment">/*&#32;head&#32;and&#32;tail&#32;elements&#32;of&#32;allocation&#32;lists&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00072"/><link linkend="_debugmalloc_8h_1a6270b6c4128e9715c7e47c0d007e4367">00072</link> }&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00073"/>00073 
<anchor xml:id="_debugmalloc_8h_source_1l00074"/>00074 
<anchor xml:id="_debugmalloc_8h_source_1l00075"/>00075 <emphasis role="comment">/*&#32;this&#32;forward&#32;declaration&#32;is&#32;required&#32;by&#32;the&#32;singleton&#32;manager&#32;function&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00076"/>00076 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*&#32;debugmalloc_create(<emphasis role="keywordtype">void</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00077"/>00077 
<anchor xml:id="_debugmalloc_8h_source_1l00078"/>00078 
<anchor xml:id="_debugmalloc_8h_source_1l00079"/>00079 <emphasis role="comment">/*&#32;creates&#32;singleton&#32;instance.&#32;as&#32;this&#32;function&#32;is&#32;static&#32;included&#32;to&#32;different</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00080"/>00080 <emphasis role="comment">&#32;*&#32;translation&#32;units,&#32;multiple&#32;instances&#32;of&#32;the&#32;static&#32;variables&#32;are&#32;created.</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00081"/>00081 <emphasis role="comment">&#32;*&#32;to&#32;make&#32;sure&#32;it&#32;is&#32;really&#32;a&#32;singleton,&#32;these&#32;instances&#32;must&#32;know&#32;each&#32;other</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00082"/>00082 <emphasis role="comment">&#32;*&#32;somethow.&#32;an&#32;environment&#32;variable&#32;is&#32;used&#32;for&#32;that&#32;purpose,&#32;ie.&#32;the&#32;address</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00083"/>00083 <emphasis role="comment">&#32;*&#32;of&#32;the&#32;singleton&#32;allocated&#32;is&#32;stored&#32;by&#32;the&#32;operating&#32;system.</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00084"/>00084 <emphasis role="comment">&#32;*&#32;this&#32;implementation&#32;is&#32;not&#32;thread-safe.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00085"/>00085 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*&#32;debugmalloc_singleton(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00086"/>00086 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;envstr[100];
<anchor xml:id="_debugmalloc_8h_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*instance&#32;=&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00088"/>00088 
<anchor xml:id="_debugmalloc_8h_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;if&#32;we&#32;do&#32;not&#32;know&#32;the&#32;address&#32;of&#32;the&#32;singleton:</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00090"/>00090 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;-&#32;maybe&#32;we&#32;are&#32;the&#32;one&#32;to&#32;create&#32;it&#32;(env&#32;variable&#32;also&#32;does&#32;not&#32;exist)</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00091"/>00091 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;-&#32;or&#32;it&#32;is&#32;already&#32;created,&#32;and&#32;stored&#32;in&#32;the&#32;env&#32;variable.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(instance&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;envvarname[100]&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprintf(envvarname,&#32;<emphasis role="stringliteral">&quot;%s%d&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;debugmallocsingleton&quot;</emphasis>,&#32;(<emphasis role="keywordtype">int</emphasis>)&#32;getpid());
<anchor xml:id="_debugmalloc_8h_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*envptr&#32;=&#32;getenv(envvarname);
<anchor xml:id="_debugmalloc_8h_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(envptr&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;no&#32;env&#32;variable:&#32;create&#32;singleton.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instance&#32;=&#32;debugmalloc_create();
<anchor xml:id="_debugmalloc_8h_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sprintf(envstr,&#32;<emphasis role="stringliteral">&quot;%s=%p&quot;</emphasis>,&#32;envvarname,&#32;instance);
<anchor xml:id="_debugmalloc_8h_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;putenv(envstr);
<anchor xml:id="_debugmalloc_8h_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;another&#32;copy&#32;of&#32;this&#32;function&#32;already&#32;created&#32;it.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;ok&#32;=&#32;sscanf(envptr,&#32;<emphasis role="stringliteral">&quot;%p&quot;</emphasis>,&#32;&amp;instance);
<anchor xml:id="_debugmalloc_8h_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ok&#32;!=&#32;1)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;debugmalloc:&#32;nem&#32;lehet&#32;ertelmezni:&#32;%s!\n&quot;</emphasis>,&#32;envptr);
<anchor xml:id="_debugmalloc_8h_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00109"/>00109 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00110"/>00110 
<anchor xml:id="_debugmalloc_8h_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*)&#32;instance;
<anchor xml:id="_debugmalloc_8h_source_1l00112"/>00112 }
<anchor xml:id="_debugmalloc_8h_source_1l00113"/>00113 
<anchor xml:id="_debugmalloc_8h_source_1l00114"/>00114 
<anchor xml:id="_debugmalloc_8h_source_1l00115"/>00115 <emphasis role="comment">/*&#32;better&#32;version&#32;of&#32;strncpy,&#32;always&#32;terminates&#32;string&#32;with&#32;\0.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00116"/>00116 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_strlcpy(<emphasis role="keywordtype">char</emphasis>&#32;*dest,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*src,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;destsize)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00117"/>00117 &#32;&#32;&#32;&#32;strncpy(dest,&#32;src,&#32;destsize);
<anchor xml:id="_debugmalloc_8h_source_1l00118"/>00118 &#32;&#32;&#32;&#32;dest[destsize&#32;-&#32;1]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00119"/>00119 }
<anchor xml:id="_debugmalloc_8h_source_1l00120"/>00120 
<anchor xml:id="_debugmalloc_8h_source_1l00121"/>00121 
<anchor xml:id="_debugmalloc_8h_source_1l00122"/>00122 <emphasis role="comment">/*&#32;set&#32;the&#32;name&#32;of&#32;the&#32;log&#32;file&#32;for&#32;debugmalloc.&#32;empty&#32;filename</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00123"/>00123 <emphasis role="comment">&#32;*&#32;means&#32;logging&#32;to&#32;stderr.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00124"/>00124 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_log_file(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*logfilename)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(logfilename&#32;==&#32;NULL)
<anchor xml:id="_debugmalloc_8h_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;logfilename&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00127"/>00127 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00128"/>00128 &#32;&#32;&#32;&#32;debugmalloc_strlcpy(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>,&#32;logfilename,&#32;<emphasis role="keyword">sizeof</emphasis>(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00129"/>00129 }
<anchor xml:id="_debugmalloc_8h_source_1l00130"/>00130 
<anchor xml:id="_debugmalloc_8h_source_1l00131"/>00131 
<anchor xml:id="_debugmalloc_8h_source_1l00132"/>00132 <emphasis role="comment">/*&#32;set&#32;the&#32;maximum&#32;size&#32;of&#32;one&#32;block.&#32;useful&#32;for&#32;debugging&#32;purposes.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00133"/>00133 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_max_block_size(<emphasis role="keywordtype">long</emphasis>&#32;max_block_size)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00135"/>00135 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a3efccbd2d65ddc16ee04c084a6885952">max_block_size</link>&#32;=&#32;max_block_size;
<anchor xml:id="_debugmalloc_8h_source_1l00136"/>00136 }
<anchor xml:id="_debugmalloc_8h_source_1l00137"/>00137 
<anchor xml:id="_debugmalloc_8h_source_1l00138"/>00138 
<anchor xml:id="_debugmalloc_8h_source_1l00139"/>00139 
<anchor xml:id="_debugmalloc_8h_source_1l00140"/>00140 <emphasis role="comment">/*&#32;printf&#32;to&#32;the&#32;log&#32;file,&#32;or&#32;stderr.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00141"/>00141 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_log(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*format,&#32;...)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00142"/>00142 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00143"/>00143 &#32;&#32;&#32;&#32;FILE&#32;*f&#32;=&#32;stderr;
<anchor xml:id="_debugmalloc_8h_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>[0]&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;=&#32;fopen(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>,&#32;<emphasis role="stringliteral">&quot;at&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;f&#32;=&#32;stderr;
<anchor xml:id="_debugmalloc_8h_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;debugmalloc:&#32;nem&#32;tudom&#32;megnyitni&#32;a&#32;%s&#32;fajlt&#32;irasra!\n&quot;</emphasis>,&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_strlcpy(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keyword">sizeof</emphasis>(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00151"/>00151 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00152"/>00152 
<anchor xml:id="_debugmalloc_8h_source_1l00153"/>00153 &#32;&#32;&#32;&#32;va_list&#32;ap;
<anchor xml:id="_debugmalloc_8h_source_1l00154"/>00154 &#32;&#32;&#32;&#32;va_start(ap,&#32;format);
<anchor xml:id="_debugmalloc_8h_source_1l00155"/>00155 &#32;&#32;&#32;&#32;vfprintf(f,&#32;format,&#32;ap);
<anchor xml:id="_debugmalloc_8h_source_1l00156"/>00156 &#32;&#32;&#32;&#32;va_end(ap);
<anchor xml:id="_debugmalloc_8h_source_1l00157"/>00157 
<anchor xml:id="_debugmalloc_8h_source_1l00158"/>00158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(f&#32;!=&#32;stderr)
<anchor xml:id="_debugmalloc_8h_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fclose(f);
<anchor xml:id="_debugmalloc_8h_source_1l00160"/>00160 }
<anchor xml:id="_debugmalloc_8h_source_1l00161"/>00161 
<anchor xml:id="_debugmalloc_8h_source_1l00162"/>00162 
<anchor xml:id="_debugmalloc_8h_source_1l00163"/>00163 <emphasis role="comment">/*&#32;initialize&#32;a&#32;memory&#32;block&#32;allocated&#32;for&#32;the&#32;user.&#32;the&#32;start&#32;and&#32;the&#32;end</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00164"/>00164 <emphasis role="comment">&#32;*&#32;of&#32;the&#32;block&#32;is&#32;initialized&#32;with&#32;the&#32;canary&#32;characters.&#32;if&#32;&apos;zero&apos;&#32;is</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00165"/>00165 <emphasis role="comment">&#32;*&#32;true,&#32;the&#32;user&#32;memory&#32;area&#32;is&#32;zero-initialized,&#32;otherwise&#32;it&#32;is&#32;also</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00166"/>00166 <emphasis role="comment">&#32;*&#32;filled&#32;with&#32;the&#32;canary&#32;character&#32;to&#32;simulate&#32;garbage&#32;in&#32;memory.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00167"/>00167 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_memory_init(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*elem,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;zero)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00168"/>00168 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*real_mem&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00169"/>00169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*user_mem&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00170"/>00170 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*canary1&#32;=&#32;real_mem;
<anchor xml:id="_debugmalloc_8h_source_1l00171"/>00171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*canary2&#32;=&#32;real_mem&#32;+&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>&#32;+&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00172"/>00172 &#32;&#32;&#32;&#32;memset(canary1,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00173"/>00173 &#32;&#32;&#32;&#32;memset(canary2,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00174"/>00174 &#32;&#32;&#32;&#32;memset(user_mem,&#32;zero&#32;?&#32;0&#32;:&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>,&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00175"/>00175 }
<anchor xml:id="_debugmalloc_8h_source_1l00176"/>00176 
<anchor xml:id="_debugmalloc_8h_source_1l00177"/>00177 <emphasis role="comment">/*&#32;check&#32;canary,&#32;return&#32;true&#32;if&#32;ok,&#32;false&#32;if&#32;corrupted.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00178"/>00178 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;debugmalloc_canary_ok(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;<emphasis role="keyword">const</emphasis>&#32;*elem)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00179"/>00179 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*real_mem&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00180"/>00180 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*canary1&#32;=&#32;real_mem;
<anchor xml:id="_debugmalloc_8h_source_1l00181"/>00181 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*canary2&#32;=&#32;real_mem&#32;+&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>&#32;+&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00182"/>00182 &#32;&#32;&#32;&#32;for&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>;&#32;++i)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(canary1[i]&#32;!=&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>)
<anchor xml:id="_debugmalloc_8h_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(canary2[i]&#32;!=&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>)
<anchor xml:id="_debugmalloc_8h_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00187"/>00187 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00188"/>00188 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00189"/>00189 }
<anchor xml:id="_debugmalloc_8h_source_1l00190"/>00190 
<anchor xml:id="_debugmalloc_8h_source_1l00191"/>00191 
<anchor xml:id="_debugmalloc_8h_source_1l00192"/>00192 <emphasis role="comment">/*&#32;dump&#32;memory&#32;contents&#32;to&#32;log&#32;file.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00193"/>00193 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_dump_memory(<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00194"/>00194 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;y&#32;=&#32;0;&#32;y&#32;&lt;&#32;(size&#32;+&#32;15)&#32;/&#32;16;&#32;y++)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;line[80];
<anchor xml:id="_debugmalloc_8h_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;pos&#32;=&#32;0;
<anchor xml:id="_debugmalloc_8h_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;sprintf(line&#32;+&#32;pos,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;&#32;&#32;%04x&#32;&#32;&quot;</emphasis>,&#32;y&#32;*&#32;16);
<anchor xml:id="_debugmalloc_8h_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;x&#32;=&#32;0;&#32;x&#32;&lt;&#32;16;&#32;x++)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;*&#32;16&#32;+&#32;x&#32;&lt;&#32;size)
<anchor xml:id="_debugmalloc_8h_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;sprintf(line&#32;+&#32;pos,&#32;<emphasis role="stringliteral">&quot;%02x&#32;&quot;</emphasis>,&#32;mem[y&#32;*&#32;16&#32;+&#32;x]);
<anchor xml:id="_debugmalloc_8h_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;sprintf(line&#32;+&#32;pos,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;sprintf(line&#32;+&#32;pos,&#32;<emphasis role="stringliteral">&quot;&#32;&#32;&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;x&#32;=&#32;0;&#32;x&#32;&lt;&#32;16;&#32;x++)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;*&#32;16&#32;+&#32;x&#32;&lt;&#32;size)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;c&#32;=&#32;mem[y&#32;*&#32;16&#32;+&#32;x];
<anchor xml:id="_debugmalloc_8h_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;sprintf(line&#32;+&#32;pos,&#32;<emphasis role="stringliteral">&quot;%c&quot;</emphasis>,&#32;isprint(c)&#32;?&#32;c&#32;:&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;sprintf(line&#32;+&#32;pos,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;%s\n&quot;</emphasis>,&#32;line);
<anchor xml:id="_debugmalloc_8h_source_1l00215"/>00215 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00216"/>00216 }
<anchor xml:id="_debugmalloc_8h_source_1l00217"/>00217 
<anchor xml:id="_debugmalloc_8h_source_1l00218"/>00218 
<anchor xml:id="_debugmalloc_8h_source_1l00219"/>00219 <emphasis role="comment">/*&#32;dump&#32;data&#32;of&#32;allocated&#32;memory&#32;block.</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00220"/>00220 <emphasis role="comment">&#32;*&#32;if&#32;the&#32;canary&#32;is&#32;corrupted,&#32;it&#32;is&#32;also&#32;written&#32;to&#32;the&#32;log.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00221"/>00221 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_dump_elem(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;<emphasis role="keyword">const</emphasis>&#32;*elem)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;canary_ok&#32;=&#32;debugmalloc_canary_ok(elem);
<anchor xml:id="_debugmalloc_8h_source_1l00223"/>00223 
<anchor xml:id="_debugmalloc_8h_source_1l00224"/>00224 &#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;&#32;&#32;%p,&#32;%u&#32;bajt,&#32;kanari:&#32;%s\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&#32;&#32;%s:%u,&#32;%s(%s)\n&quot;</emphasis>,
<anchor xml:id="_debugmalloc_8h_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>,&#32;(<emphasis role="keywordtype">unsigned</emphasis>)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>,&#32;canary_ok&#32;?&#32;<emphasis role="stringliteral">&quot;ok&quot;</emphasis>&#32;:&#32;<emphasis role="stringliteral">&quot;**SERULT**&quot;</emphasis>,
<anchor xml:id="_debugmalloc_8h_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1aedfc2cd00d6ab713f95c6c04f5b5b872">file</link>,&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1ac7102a001b0ab6ba17fa678e52da3bd7">line</link>,
<anchor xml:id="_debugmalloc_8h_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1aaf9421513f3d0e67a51cda1ed2796b39">func</link>,&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a924e868d89538624ae6f33b62a8fa1e5">expr</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00229"/>00229 
<anchor xml:id="_debugmalloc_8h_source_1l00230"/>00230 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!canary_ok)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;ELOTTE&#32;kanari:&#32;\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_dump_memory((<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00233"/>00233 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00234"/>00234 
<anchor xml:id="_debugmalloc_8h_source_1l00235"/>00235 &#32;&#32;&#32;&#32;debugmalloc_dump_memory((<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>,&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>&#32;&gt;&#32;64&#32;?&#32;64&#32;:&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00236"/>00236 
<anchor xml:id="_debugmalloc_8h_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!canary_ok)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;&#32;&#32;&#32;&#32;UTANA&#32;kanari:&#32;\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_dump_memory((<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*)&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>&#32;+&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>&#32;+&#32;elem-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00240"/>00240 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00241"/>00241 }
<anchor xml:id="_debugmalloc_8h_source_1l00242"/>00242 
<anchor xml:id="_debugmalloc_8h_source_1l00243"/>00243 
<anchor xml:id="_debugmalloc_8h_source_1l00244"/>00244 <emphasis role="comment">/*&#32;dump&#32;data&#32;of&#32;all&#32;memory&#32;blocks&#32;allocated.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00245"/>00245 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_dump(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00246"/>00246 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00247"/>00247 &#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;**&#32;DEBUGMALLOC&#32;DUMP&#32;************************************\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00248"/>00248 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cnt&#32;=&#32;0;
<anchor xml:id="_debugmalloc_8h_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">debugmalloc_tablesize</link>;&#32;i++)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*head&#32;=&#32;&amp;instance-&gt;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[i];
<anchor xml:id="_debugmalloc_8h_source_1l00251"/>00251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*iter&#32;=&#32;head-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>;&#32;iter-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;!=&#32;NULL;&#32;iter&#32;=&#32;iter-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++cnt;
<anchor xml:id="_debugmalloc_8h_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;**&#32;%d/%d.&#32;rekord:\n&quot;</emphasis>,&#32;cnt,&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">alloc_count</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_dump_elem(iter);
<anchor xml:id="_debugmalloc_8h_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00256"/>00256 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00257"/>00257 &#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;**&#32;DEBUGMALLOC&#32;DUMP&#32;VEGE&#32;*******************************\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00258"/>00258 }
<anchor xml:id="_debugmalloc_8h_source_1l00259"/>00259 
<anchor xml:id="_debugmalloc_8h_source_1l00260"/>00260 
<anchor xml:id="_debugmalloc_8h_source_1l00261"/>00261 <emphasis role="comment">/*&#32;called&#32;at&#32;program&#32;exit&#32;to&#32;dump&#32;data&#32;if&#32;there&#32;is&#32;a&#32;leak,</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00262"/>00262 <emphasis role="comment">&#32;*&#32;ie.&#32;allocated&#32;block&#32;remained.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00263"/>00263 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_atexit_dump(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00264"/>00264 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00265"/>00265 &#32;&#32;&#32;&#32;
<anchor xml:id="_debugmalloc_8h_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(instance-&gt;<link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">alloc_count</link>&#32;&gt;&#32;0)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;********************************************************\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;*&#32;MEMORIASZIVARGAS&#32;VAN&#32;A&#32;PROGRAMBAN!!!\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;********************************************************\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_dump();
<anchor xml:id="_debugmalloc_8h_source_1l00273"/>00273 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;****************************************************\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;*&#32;Debugmalloc:&#32;nincs&#32;memoriaszivargas&#32;a&#32;programban.\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;*&#32;Osszes&#32;foglalas:&#32;%d&#32;blokk,&#32;%d&#32;bajt.\n&quot;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;****************************************************\n&quot;</emphasis>,
<anchor xml:id="_debugmalloc_8h_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1ae76cf1e973fe60e91222a1da3f17a754">all_alloc_count</link>,&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1ae0268ac149302566a274deb380794455">all_alloc_bytes</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00279"/>00279 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00280"/>00280 }
<anchor xml:id="_debugmalloc_8h_source_1l00281"/>00281 
<anchor xml:id="_debugmalloc_8h_source_1l00282"/>00282 
<anchor xml:id="_debugmalloc_8h_source_1l00283"/>00283 <emphasis role="comment">/*&#32;hash&#32;function&#32;for&#32;bucket&#32;hash.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00284"/>00284 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;debugmalloc_hash(<emphasis role="keywordtype">void</emphasis>&#32;*address)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;the&#32;last&#32;few&#32;bits&#32;are&#32;ignored,&#32;as&#32;they&#32;are&#32;usually&#32;zero&#32;for</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00286"/>00286 <emphasis role="comment">&#32;&#32;&#32;&#32;&#32;*&#32;alignment&#32;purposes.&#32;all&#32;tested&#32;architectures&#32;used&#32;16&#32;byte&#32;allocation.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;cut&#32;=&#32;(size_t)address&#32;&gt;&gt;&#32;4;
<anchor xml:id="_debugmalloc_8h_source_1l00288"/>00288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cut&#32;%&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">debugmalloc_tablesize</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00289"/>00289 }
<anchor xml:id="_debugmalloc_8h_source_1l00290"/>00290 
<anchor xml:id="_debugmalloc_8h_source_1l00291"/>00291 
<anchor xml:id="_debugmalloc_8h_source_1l00292"/>00292 <emphasis role="comment">/*&#32;insert&#32;element&#32;to&#32;hash&#32;table.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00293"/>00293 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_insert(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*entry)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00295"/>00295 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;idx&#32;=&#32;debugmalloc_hash(entry-&gt;<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00296"/>00296 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*head&#32;=&#32;&amp;instance-&gt;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[idx];
<anchor xml:id="_debugmalloc_8h_source_1l00297"/>00297 &#32;&#32;&#32;&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>&#32;=&#32;head;
<anchor xml:id="_debugmalloc_8h_source_1l00298"/>00298 &#32;&#32;&#32;&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;=&#32;head-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00299"/>00299 &#32;&#32;&#32;&#32;head-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>-&gt;<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>&#32;=&#32;entry;
<anchor xml:id="_debugmalloc_8h_source_1l00300"/>00300 &#32;&#32;&#32;&#32;head-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;=&#32;entry;
<anchor xml:id="_debugmalloc_8h_source_1l00301"/>00301 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">alloc_count</link>&#32;+=&#32;1;
<anchor xml:id="_debugmalloc_8h_source_1l00302"/>00302 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1acdde6dca667a33cc5face7647a8bbf9f">alloc_bytes</link>&#32;+=&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00303"/>00303 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1ae76cf1e973fe60e91222a1da3f17a754">all_alloc_count</link>&#32;+=&#32;1;
<anchor xml:id="_debugmalloc_8h_source_1l00304"/>00304 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1ae0268ac149302566a274deb380794455">all_alloc_bytes</link>&#32;+=&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00305"/>00305 }
<anchor xml:id="_debugmalloc_8h_source_1l00306"/>00306 
<anchor xml:id="_debugmalloc_8h_source_1l00307"/>00307 
<anchor xml:id="_debugmalloc_8h_source_1l00308"/>00308 <emphasis role="comment">/*&#32;remove&#32;element&#32;from&#32;hash&#32;table&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00309"/>00309 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_remove(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*entry)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00310"/>00310 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00311"/>00311 &#32;&#32;&#32;&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>-&gt;<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>&#32;=&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00312"/>00312 &#32;&#32;&#32;&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;=&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00313"/>00313 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">alloc_count</link>&#32;-=&#32;1;
<anchor xml:id="_debugmalloc_8h_source_1l00314"/>00314 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1acdde6dca667a33cc5face7647a8bbf9f">alloc_bytes</link>&#32;-=&#32;entry-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00315"/>00315 }
<anchor xml:id="_debugmalloc_8h_source_1l00316"/>00316 
<anchor xml:id="_debugmalloc_8h_source_1l00317"/>00317 
<anchor xml:id="_debugmalloc_8h_source_1l00318"/>00318 <emphasis role="comment">/*&#32;find&#32;element&#32;in&#32;hash&#32;table,&#32;given&#32;with&#32;the&#32;memory&#32;address&#32;that&#32;the&#32;user&#32;sees.</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00319"/>00319 <emphasis role="comment">&#32;*&#32;@return&#32;the&#32;linked&#32;list&#32;entry,&#32;or&#32;null&#32;if&#32;not&#32;found.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00320"/>00320 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*debugmalloc_find(<emphasis role="keywordtype">void</emphasis>&#32;*mem)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00321"/>00321 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00322"/>00322 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;idx&#32;=&#32;debugmalloc_hash(mem);
<anchor xml:id="_debugmalloc_8h_source_1l00323"/>00323 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*head&#32;=&#32;&amp;instance-&gt;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[idx];
<anchor xml:id="_debugmalloc_8h_source_1l00324"/>00324 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*iter&#32;=&#32;head-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>;&#32;iter-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;!=&#32;NULL;&#32;iter&#32;=&#32;iter-&gt;<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>)
<anchor xml:id="_debugmalloc_8h_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(iter-&gt;user_mem&#32;==&#32;mem)
<anchor xml:id="_debugmalloc_8h_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;iter;
<anchor xml:id="_debugmalloc_8h_source_1l00327"/>00327 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00328"/>00328 }
<anchor xml:id="_debugmalloc_8h_source_1l00329"/>00329 
<anchor xml:id="_debugmalloc_8h_source_1l00330"/>00330 
<anchor xml:id="_debugmalloc_8h_source_1l00331"/>00331 <emphasis role="comment">/*&#32;allocate&#32;memory.&#32;this&#32;function&#32;is&#32;called&#32;via&#32;the&#32;macro.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00332"/>00332 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*debugmalloc_malloc_full(<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*func,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*expr,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;zero)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00333"/>00333 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;imitate&#32;standard&#32;malloc:&#32;return&#32;null&#32;if&#32;size&#32;is&#32;zero&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00334"/>00334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;==&#32;0)
<anchor xml:id="_debugmalloc_8h_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00336"/>00336 &#32;&#32;&#32;&#32;
<anchor xml:id="_debugmalloc_8h_source_1l00337"/>00337 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;check&#32;max&#32;size&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00338"/>00338 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;debugmalloc_singleton();
<anchor xml:id="_debugmalloc_8h_source_1l00339"/>00339 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size&#32;&gt;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a3efccbd2d65ddc16ee04c084a6885952">max_block_size</link>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00340"/>00340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;a&#32;blokk&#32;merete&#32;tul&#32;nagy,&#32;%u&#32;bajt;&#32;debugmalloc_max_block_size()&#32;fuggvennyel&#32;novelheto.\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line,&#32;(<emphasis role="keywordtype">unsigned</emphasis>)&#32;size);
<anchor xml:id="_debugmalloc_8h_source_1l00341"/>00341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00342"/>00342 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00343"/>00343 
<anchor xml:id="_debugmalloc_8h_source_1l00344"/>00344 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;allocate&#32;more&#32;memory,&#32;make&#32;room&#32;for&#32;canary&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00345"/>00345 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*real_mem&#32;=&#32;<link linkend="_debugmalloc_8h_1a535b58ab5aa48e2e86073e334d43fd32">malloc</link>(size&#32;+&#32;2&#32;*&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00346"/>00346 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(real_mem&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;nem&#32;sikerult&#32;%u&#32;meretu&#32;memoriat&#32;foglalni!\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line,&#32;(<emphasis role="keywordtype">unsigned</emphasis>)&#32;size);
<anchor xml:id="_debugmalloc_8h_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00349"/>00349 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00350"/>00350 
<anchor xml:id="_debugmalloc_8h_source_1l00351"/>00351 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;allocate&#32;memory&#32;for&#32;linked&#32;list&#32;element&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00352"/>00352 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*newentry&#32;=&#32;(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*)&#32;<link linkend="_debugmalloc_8h_1a535b58ab5aa48e2e86073e334d43fd32">malloc</link>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00353"/>00353 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newentry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00354"/>00354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1aa7943e5d135734f6801bebcc37401fc0">free</link>(real_mem);
<anchor xml:id="_debugmalloc_8h_source_1l00355"/>00355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;le&#32;tudtam&#32;foglalni&#32;%u&#32;memoriat,&#32;de&#32;utana&#32;a&#32;sajatnak&#32;nem,&#32;sry\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line,&#32;(<emphasis role="keywordtype">unsigned</emphasis>)&#32;size);
<anchor xml:id="_debugmalloc_8h_source_1l00356"/>00356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00357"/>00357 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00358"/>00358 
<anchor xml:id="_debugmalloc_8h_source_1l00359"/>00359 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;metadata&#32;of&#32;allocation:&#32;caller&#32;function,&#32;code&#32;line&#32;etc.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00360"/>00360 &#32;&#32;&#32;&#32;debugmalloc_strlcpy(newentry-&gt;<link linkend="_struct_debugmalloc_entry_1aaf9421513f3d0e67a51cda1ed2796b39">func</link>,&#32;func,&#32;<emphasis role="keyword">sizeof</emphasis>(newentry-&gt;<link linkend="_struct_debugmalloc_entry_1aaf9421513f3d0e67a51cda1ed2796b39">func</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00361"/>00361 &#32;&#32;&#32;&#32;debugmalloc_strlcpy(newentry-&gt;<link linkend="_struct_debugmalloc_entry_1a924e868d89538624ae6f33b62a8fa1e5">expr</link>,&#32;expr,&#32;<emphasis role="keyword">sizeof</emphasis>(newentry-&gt;<link linkend="_struct_debugmalloc_entry_1a924e868d89538624ae6f33b62a8fa1e5">expr</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00362"/>00362 &#32;&#32;&#32;&#32;debugmalloc_strlcpy(newentry-&gt;<link linkend="_struct_debugmalloc_entry_1aedfc2cd00d6ab713f95c6c04f5b5b872">file</link>,&#32;file,&#32;<emphasis role="keyword">sizeof</emphasis>(newentry-&gt;<link linkend="_struct_debugmalloc_entry_1aedfc2cd00d6ab713f95c6c04f5b5b872">file</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00363"/>00363 &#32;&#32;&#32;&#32;newentry-&gt;<link linkend="_struct_debugmalloc_entry_1ac7102a001b0ab6ba17fa678e52da3bd7">line</link>&#32;=&#32;line;
<anchor xml:id="_debugmalloc_8h_source_1l00364"/>00364 
<anchor xml:id="_debugmalloc_8h_source_1l00365"/>00365 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;address&#32;of&#32;allocated&#32;memory&#32;chunk&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00366"/>00366 &#32;&#32;&#32;&#32;newentry-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>&#32;=&#32;real_mem;
<anchor xml:id="_debugmalloc_8h_source_1l00367"/>00367 &#32;&#32;&#32;&#32;newentry-&gt;<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>&#32;=&#32;(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)&#32;real_mem&#32;+&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00368"/>00368 &#32;&#32;&#32;&#32;newentry-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>&#32;=&#32;size;
<anchor xml:id="_debugmalloc_8h_source_1l00369"/>00369 &#32;&#32;&#32;&#32;debugmalloc_memory_init(newentry,&#32;zero);
<anchor xml:id="_debugmalloc_8h_source_1l00370"/>00370 
<anchor xml:id="_debugmalloc_8h_source_1l00371"/>00371 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;store&#32;in&#32;list&#32;and&#32;return&#32;pointer&#32;to&#32;user&#32;area&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00372"/>00372 &#32;&#32;&#32;&#32;debugmalloc_insert(newentry);
<anchor xml:id="_debugmalloc_8h_source_1l00373"/>00373 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newentry-&gt;<link linkend="_struct_debugmalloc_entry_1aa1072c18d508a25ad252e970cb082f61">user_mem</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00374"/>00374 }
<anchor xml:id="_debugmalloc_8h_source_1l00375"/>00375 
<anchor xml:id="_debugmalloc_8h_source_1l00376"/>00376 
<anchor xml:id="_debugmalloc_8h_source_1l00377"/>00377 <emphasis role="comment">/*&#32;free&#32;memory&#32;and&#32;remove&#32;list&#32;item.&#32;before&#32;deleting,&#32;the&#32;chuck&#32;is&#32;filled&#32;with</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00378"/>00378 <emphasis role="comment">&#32;*&#32;the&#32;canary&#32;byte&#32;to&#32;make&#32;sure&#32;that&#32;the&#32;user&#32;will&#32;see&#32;garbage&#32;if&#32;the&#32;memory</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00379"/>00379 <emphasis role="comment">&#32;*&#32;is&#32;accessed&#32;after&#32;freeing.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00380"/>00380 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_free_inner(<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*deleted)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00381"/>00381 &#32;&#32;&#32;&#32;debugmalloc_remove(deleted);
<anchor xml:id="_debugmalloc_8h_source_1l00382"/>00382 
<anchor xml:id="_debugmalloc_8h_source_1l00383"/>00383 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;fill&#32;with&#32;garbage,&#32;then&#32;remove&#32;from&#32;linked&#32;list&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00384"/>00384 &#32;&#32;&#32;&#32;memset(deleted-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>,&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>,&#32;deleted-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>&#32;+&#32;2&#32;*&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00385"/>00385 &#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1aa7943e5d135734f6801bebcc37401fc0">free</link>(deleted-&gt;<link linkend="_struct_debugmalloc_entry_1a1dd86bcce29ead94d3dc5db5d932ea0c">real_mem</link>);
<anchor xml:id="_debugmalloc_8h_source_1l00386"/>00386 &#32;&#32;&#32;&#32;<link linkend="_debugmalloc_8h_1aa7943e5d135734f6801bebcc37401fc0">free</link>(deleted);
<anchor xml:id="_debugmalloc_8h_source_1l00387"/>00387 }
<anchor xml:id="_debugmalloc_8h_source_1l00388"/>00388 
<anchor xml:id="_debugmalloc_8h_source_1l00389"/>00389 
<anchor xml:id="_debugmalloc_8h_source_1l00390"/>00390 <emphasis role="comment">/*&#32;free&#32;memory&#32;-&#32;called&#32;via&#32;the&#32;macro.</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00391"/>00391 <emphasis role="comment">&#32;*&#32;as&#32;all&#32;allocations&#32;are&#32;tracked&#32;in&#32;the&#32;list,&#32;this&#32;function&#32;can&#32;terminate&#32;the&#32;program</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00392"/>00392 <emphasis role="comment">&#32;*&#32;if&#32;a&#32;block&#32;is&#32;freed&#32;twice&#32;or&#32;the&#32;free&#32;function&#32;is&#32;called&#32;with&#32;an&#32;invalid&#32;address.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00393"/>00393 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;debugmalloc_free_full(<emphasis role="keywordtype">void</emphasis>&#32;*mem,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*func,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00394"/>00394 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;imitate&#32;standard&#32;free&#32;function:&#32;if&#32;ptr&#32;is&#32;null,&#32;no&#32;operation&#32;is&#32;performed&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00395"/>00395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mem&#32;==&#32;NULL)
<anchor xml:id="_debugmalloc_8h_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_debugmalloc_8h_source_1l00397"/>00397 
<anchor xml:id="_debugmalloc_8h_source_1l00398"/>00398 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;find&#32;allocation,&#32;abort&#32;if&#32;not&#32;found&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00399"/>00399 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*deleted&#32;=&#32;debugmalloc_find(mem);
<anchor xml:id="_debugmalloc_8h_source_1l00400"/>00400 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(deleted&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;olyan&#32;teruletet&#32;probalsz&#32;felszabaditani,&#32;ami&#32;nincs&#32;lefoglalva!\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line);
<anchor xml:id="_debugmalloc_8h_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00403"/>00403 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00404"/>00404 
<anchor xml:id="_debugmalloc_8h_source_1l00405"/>00405 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;check&#32;canary&#32;and&#32;then&#32;free&#32;memory&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00406"/>00406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!debugmalloc_canary_ok(deleted))&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;a&#32;%p&#32;memoriateruletet&#32;tulindexelted!\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line,&#32;mem);
<anchor xml:id="_debugmalloc_8h_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_dump_elem(deleted);
<anchor xml:id="_debugmalloc_8h_source_1l00409"/>00409 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00410"/>00410 &#32;&#32;&#32;&#32;debugmalloc_free_inner(deleted);
<anchor xml:id="_debugmalloc_8h_source_1l00411"/>00411 }
<anchor xml:id="_debugmalloc_8h_source_1l00412"/>00412 
<anchor xml:id="_debugmalloc_8h_source_1l00413"/>00413 
<anchor xml:id="_debugmalloc_8h_source_1l00414"/>00414 <emphasis role="comment">/*&#32;realloc-like&#32;function.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00415"/>00415 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;*debugmalloc_realloc_full(<emphasis role="keywordtype">void</emphasis>&#32;*oldmem,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;newsize,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*func,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*expr,&#32;<emphasis role="keywordtype">char</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;*file,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;line)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00416"/>00416 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;imitate&#32;standard&#32;realloc:&#32;equivalent&#32;to&#32;free&#32;if&#32;size&#32;is&#32;null.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00417"/>00417 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newsize&#32;==&#32;0)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_free_full(oldmem,&#32;func,&#32;file,&#32;line);
<anchor xml:id="_debugmalloc_8h_source_1l00419"/>00419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00420"/>00420 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00421"/>00421 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;imitate&#32;standard&#32;realloc:&#32;equivalent&#32;to&#32;malloc&#32;if&#32;first&#32;param&#32;is&#32;NULL&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00422"/>00422 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oldmem&#32;==&#32;NULL)
<anchor xml:id="_debugmalloc_8h_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;debugmalloc_malloc_full(newsize,&#32;func,&#32;expr,&#32;file,&#32;line,&#32;0);
<anchor xml:id="_debugmalloc_8h_source_1l00424"/>00424 
<anchor xml:id="_debugmalloc_8h_source_1l00425"/>00425 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;find&#32;old&#32;allocation.&#32;abort&#32;if&#32;not&#32;found.&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00426"/>00426 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_entry">DebugmallocEntry</link>&#32;*oldentry&#32;=&#32;debugmalloc_find(oldmem);
<anchor xml:id="_debugmalloc_8h_source_1l00427"/>00427 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oldentry&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00428"/>00428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;olyan&#32;teruletet&#32;probalsz&#32;atmeretezni,&#32;ami&#32;nincs&#32;lefoglalva!\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line);
<anchor xml:id="_debugmalloc_8h_source_1l00429"/>00429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00430"/>00430 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00431"/>00431 
<anchor xml:id="_debugmalloc_8h_source_1l00432"/>00432 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;create&#32;new&#32;allocation,&#32;copy&#32;&amp;&#32;free&#32;old&#32;data&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00433"/>00433 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*newmem&#32;=&#32;debugmalloc_malloc_full(newsize,&#32;func,&#32;expr,&#32;file,&#32;line,&#32;<emphasis role="keyword">false</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00434"/>00434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newmem&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;%s&#32;@&#32;%s:%u:&#32;nem&#32;sikerult&#32;uj&#32;memoriat&#32;foglalni&#32;az&#32;atmeretezeshez!\n&quot;</emphasis>,&#32;func,&#32;file,&#32;line);
<anchor xml:id="_debugmalloc_8h_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;imitate&#32;standard&#32;realloc:&#32;original&#32;block&#32;is&#32;untouched,&#32;but&#32;return&#32;NULL&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00438"/>00438 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00439"/>00439 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;smaller&#32;=&#32;oldentry-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>&#32;&lt;&#32;newsize&#32;?&#32;oldentry-&gt;<link linkend="_struct_debugmalloc_entry_1a0cd3ccbafdd6d08623b85b84847a0e89">size</link>&#32;:&#32;newsize;
<anchor xml:id="_debugmalloc_8h_source_1l00440"/>00440 &#32;&#32;&#32;&#32;memcpy(newmem,&#32;oldmem,&#32;smaller);
<anchor xml:id="_debugmalloc_8h_source_1l00441"/>00441 &#32;&#32;&#32;&#32;debugmalloc_free_inner(oldentry);
<anchor xml:id="_debugmalloc_8h_source_1l00442"/>00442 
<anchor xml:id="_debugmalloc_8h_source_1l00443"/>00443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newmem;
<anchor xml:id="_debugmalloc_8h_source_1l00444"/>00444 }
<anchor xml:id="_debugmalloc_8h_source_1l00445"/>00445 
<anchor xml:id="_debugmalloc_8h_source_1l00446"/>00446 
<anchor xml:id="_debugmalloc_8h_source_1l00447"/>00447 <emphasis role="comment">/*&#32;initialize&#32;debugmalloc&#32;singleton.&#32;returns&#32;the&#32;newly&#32;allocated&#32;instance&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00448"/>00448 <emphasis role="keyword">static</emphasis>&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*&#32;debugmalloc_create(<emphasis role="keywordtype">void</emphasis>)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00449"/>00449 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;config&#32;check&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00450"/>00450 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bab345007cf28a2516c0ba24371a400520">debugmalloc_canary_size</link>&#32;%&#32;16&#32;!=&#32;0)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00451"/>00451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;a&#32;kanari&#32;merete&#32;legyen&#32;16-tal&#32;oszthato\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00452"/>00452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00453"/>00453 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00454"/>00454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba8e3d5ad8628140edd887b8920f521cfd">debugmalloc_canary_char</link>&#32;==&#32;0)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00455"/>00455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;a&#32;kanari&#32;legyen&#32;0-tol&#32;kulonbozo\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00456"/>00456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00457"/>00457 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00458"/>00458 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;avoid&#32;compiler&#32;warning&#32;if&#32;these&#32;functions&#32;are&#32;not&#32;used&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00459"/>00459 &#32;&#32;&#32;&#32;(void)&#32;debugmalloc_realloc_full;
<anchor xml:id="_debugmalloc_8h_source_1l00460"/>00460 &#32;&#32;&#32;&#32;(void)&#32;debugmalloc_log_file;
<anchor xml:id="_debugmalloc_8h_source_1l00461"/>00461 &#32;&#32;&#32;&#32;(void)&#32;debugmalloc_max_block_size;
<anchor xml:id="_debugmalloc_8h_source_1l00462"/>00462 
<anchor xml:id="_debugmalloc_8h_source_1l00463"/>00463 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;create&#32;and&#32;initialize&#32;instance&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00464"/>00464 &#32;&#32;&#32;&#32;<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*instance&#32;=&#32;(<link linkend="_struct_debugmalloc_data">DebugmallocData</link>&#32;*)&#32;<link linkend="_debugmalloc_8h_1a535b58ab5aa48e2e86073e334d43fd32">malloc</link>(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_struct_debugmalloc_data">DebugmallocData</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00465"/>00465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(instance&#32;==&#32;NULL)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00466"/>00466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;debugmalloc_log(<emphasis role="stringliteral">&quot;debugmalloc:&#32;nem&#32;sikerult&#32;elinditani&#32;a&#32;memoriakezelest\n&quot;</emphasis>);
<anchor xml:id="_debugmalloc_8h_source_1l00467"/>00467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;abort();
<anchor xml:id="_debugmalloc_8h_source_1l00468"/>00468 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00469"/>00469 &#32;&#32;&#32;&#32;debugmalloc_strlcpy(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="keyword">sizeof</emphasis>(instance-&gt;<link linkend="_struct_debugmalloc_data_1aaeb43a3c1fa6ff02ae2e49f00083cc45">logfile</link>));
<anchor xml:id="_debugmalloc_8h_source_1l00470"/>00470 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a3efccbd2d65ddc16ee04c084a6885952">max_block_size</link>&#32;=&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55bae8726dfde3f35d4345009234ee734f6c">debugmalloc_max_block_size_default</link>;
<anchor xml:id="_debugmalloc_8h_source_1l00471"/>00471 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a657e328e74eabe097c916856a5168bd4">alloc_count</link>&#32;=&#32;0;
<anchor xml:id="_debugmalloc_8h_source_1l00472"/>00472 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1acdde6dca667a33cc5face7647a8bbf9f">alloc_bytes</link>&#32;=&#32;0;
<anchor xml:id="_debugmalloc_8h_source_1l00473"/>00473 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1ae76cf1e973fe60e91222a1da3f17a754">all_alloc_count</link>&#32;=&#32;0;
<anchor xml:id="_debugmalloc_8h_source_1l00474"/>00474 &#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1ae0268ac149302566a274deb380794455">all_alloc_bytes</link>&#32;=&#32;0;
<anchor xml:id="_debugmalloc_8h_source_1l00475"/>00475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_debugmalloc_8h_1a06fc87d81c62e9abb8790b6e5713c55ba40803f0d5a26a349a78cbd998cb8a2a1">debugmalloc_tablesize</link>;&#32;i++)&#32;{
<anchor xml:id="_debugmalloc_8h_source_1l00476"/>00476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[i].<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>&#32;=&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00477"/>00477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[i].<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;=&#32;&amp;instance-&gt;<link linkend="_struct_debugmalloc_data_1a702f3dd81d3f44a3c65c73891ba0fddf">tail</link>[i];
<anchor xml:id="_debugmalloc_8h_source_1l00478"/>00478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a702f3dd81d3f44a3c65c73891ba0fddf">tail</link>[i].<link linkend="_struct_debugmalloc_entry_1ab54c691c0e5e6e7b58642af04c8f2a05">next</link>&#32;=&#32;NULL;
<anchor xml:id="_debugmalloc_8h_source_1l00479"/>00479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;instance-&gt;<link linkend="_struct_debugmalloc_data_1a702f3dd81d3f44a3c65c73891ba0fddf">tail</link>[i].<link linkend="_struct_debugmalloc_entry_1ac6a130901c63f28dbd4a61f83e45ebb7">prev</link>&#32;=&#32;&amp;instance-&gt;<link linkend="_struct_debugmalloc_data_1a0b5d4a71fa812641106443ebe09e7a01">head</link>[i];
<anchor xml:id="_debugmalloc_8h_source_1l00480"/>00480 &#32;&#32;&#32;&#32;}
<anchor xml:id="_debugmalloc_8h_source_1l00481"/>00481 
<anchor xml:id="_debugmalloc_8h_source_1l00482"/>00482 &#32;&#32;&#32;&#32;atexit(debugmalloc_atexit_dump);
<anchor xml:id="_debugmalloc_8h_source_1l00483"/>00483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;instance;
<anchor xml:id="_debugmalloc_8h_source_1l00484"/>00484 }
<anchor xml:id="_debugmalloc_8h_source_1l00485"/>00485 
<anchor xml:id="_debugmalloc_8h_source_1l00486"/>00486 
<anchor xml:id="_debugmalloc_8h_source_1l00487"/>00487 <emphasis role="comment">/*&#32;These&#32;macro-like&#32;functions&#32;forward&#32;all&#32;allocation/free</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00488"/>00488 <emphasis role="comment">&#32;*&#32;calls&#32;to&#32;debugmalloc.&#32;Usage&#32;is&#32;the&#32;same,&#32;malloc(size)</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00489"/>00489 <emphasis role="comment">&#32;*&#32;gives&#32;the&#32;address&#32;of&#32;a&#32;new&#32;memory&#32;block,&#32;free(ptr)</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00490"/>00490 <emphasis role="comment">&#32;*&#32;deallocates&#32;etc.</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00491"/>00491 <emphasis role="comment">&#32;*&#32;</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00492"/>00492 <emphasis role="comment">&#32;*&#32;If&#32;you&#32;use&#32;this&#32;file,&#32;make&#32;sure&#32;that&#32;you&#32;include&#32;this</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00493"/>00493 <emphasis role="comment">&#32;*&#32;in&#32;*ALL*&#32;translation&#32;units&#32;(*.c)&#32;of&#32;your&#32;source.&#32;The</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00494"/>00494 <emphasis role="comment">&#32;*&#32;builtin&#32;free()&#32;function&#32;cannot&#32;deallocate&#32;a&#32;memory&#32;block</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00495"/>00495 <emphasis role="comment">&#32;*&#32;that&#32;was&#32;allocated&#32;via&#32;debugmalloc,&#32;yet&#32;the&#32;name&#32;of</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00496"/>00496 <emphasis role="comment">&#32;*&#32;the&#32;function&#32;is&#32;the&#32;same!&#32;*/</emphasis>
<anchor xml:id="_debugmalloc_8h_source_1l00497"/>00497 
<anchor xml:id="_debugmalloc_8h_source_1l00498"/><link linkend="_debugmalloc_8h_1a535b58ab5aa48e2e86073e334d43fd32">00498</link> <emphasis role="preprocessor">#define&#32;malloc(S)&#32;debugmalloc_malloc_full((S),&#32;&quot;malloc&quot;</emphasis>,&#32;#S,&#32;__FILE__,&#32;__LINE__,&#32;false)
<anchor xml:id="_debugmalloc_8h_source_1l00499"/><link linkend="_debugmalloc_8h_1ac07b71d27b6b37e81ac3a4c230f5794e">00499</link> <emphasis role="preprocessor">#define&#32;calloc(N,S)&#32;debugmalloc_malloc_full((N)*(S),&#32;&quot;calloc&quot;</emphasis>,&#32;#N&#32;&quot;,&#32;&quot;&#32;#S,&#32;__FILE__,&#32;__LINE__,&#32;true)
<anchor xml:id="_debugmalloc_8h_source_1l00500"/><link linkend="_debugmalloc_8h_1a54df243d89c451240697d7d3afb5663f">00500</link> <emphasis role="preprocessor">#define&#32;realloc(P,S)&#32;debugmalloc_realloc_full((P),&#32;(S),&#32;&quot;realloc&quot;</emphasis>,&#32;#S,&#32;__FILE__,&#32;__LINE__)
<anchor xml:id="_debugmalloc_8h_source_1l00501"/><link linkend="_debugmalloc_8h_1aa7943e5d135734f6801bebcc37401fc0">00501</link> <emphasis role="preprocessor">#define&#32;free(P)&#32;debugmalloc_free_full((P),&#32;&quot;free&quot;</emphasis>,&#32;__FILE__,&#32;__LINE__)
<anchor xml:id="_debugmalloc_8h_source_1l00502"/>00502 
<anchor xml:id="_debugmalloc_8h_source_1l00503"/>00503 <emphasis role="preprocessor">#endif</emphasis>
</programlisting></section>
